# 1 "src\\main.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "src\\main.cpp"





# 1 "lib\\ES\\src/ES.h" 1



# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 1 3 4
# 9 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 3 4
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 1 3 4
# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4

# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 2 3 4
# 5 "lib\\ES\\src/ES.h" 2


# 6 "lib\\ES\\src/ES.h"
typedef void (*es_handler_t) ();
# 18 "lib\\ES\\src/ES.h"
class ESClass
{
private:
    volatile uint8_t head;
    volatile uint8_t tail;
    volatile uint8_t count;
    volatile uint8_t events[30];
    volatile es_handler_t handlers[30];
public:
    ESClass();







    void attach(uint8_t code, void (*handler_ptr) ());






    void detach(uint8_t code);






    void trigger(uint8_t code);




    void dispatch();
};

extern ESClass ES;
# 7 "src\\main.cpp" 2
# 1 "lib\\ServoMotor\\src/ServoMotor.h" 1



# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 1 3
# 77 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3

# 77 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 246 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\iom32a.h" 1 3
# 247 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 639 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\portpins.h" 1 3
# 640 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\common.h" 1 3
# 642 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\version.h" 1 3
# 644 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 1 3
# 248 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
} __fuse_t;
# 651 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\lock.h" 1 3
# 654 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 5 "lib\\ServoMotor\\src/ServoMotor.h" 2
# 33 "lib\\ServoMotor\\src/ServoMotor.h"

# 33 "lib\\ServoMotor\\src/ServoMotor.h"
enum ServomotorTimer {

    SERVOMOTOR_TIMER1,
# 46 "lib\\ServoMotor\\src/ServoMotor.h"
    SERVOMOTOR_TIMER_COUNT
};



class ServoMotorClass
{
public:







    uint8_t attach(volatile uint8_t *port, uint8_t pin);
# 72 "lib\\ServoMotor\\src/ServoMotor.h"
    uint8_t attach(volatile uint8_t *port, uint8_t pin, uint16_t min, uint16_t max);






    void detach(uint8_t index);







    uint16_t getMIN(uint8_t index);







    void setMIN(uint8_t index, uint16_t value);







    uint16_t getMAX(uint8_t index);







    void setMAX(uint8_t index, uint16_t value);







    uint16_t getAngle(uint8_t index);







    void setAngle(uint8_t index, uint16_t value);







    uint16_t getMicroseconds(uint8_t index);







    void setMicroseconds(uint8_t index, uint16_t value);
# 152 "lib\\ServoMotor\\src/ServoMotor.h"
    void update(ServomotorTimer timer, volatile uint16_t *TCNTn, volatile uint16_t *OCRnA);
};

extern ServoMotorClass ServoMotor;
# 8 "src\\main.cpp" 2
# 1 "lib\\Timer\\src/HWTimer.h" 1
# 10 "lib\\Timer\\src/HWTimer.h"
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\interrupt.h" 1 3
# 11 "lib\\Timer\\src/HWTimer.h" 2
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 149 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4

# 149 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 426 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 12 "lib\\Timer\\src/HWTimer.h" 2
# 40 "lib\\Timer\\src/HWTimer.h"
extern "C" void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_10 (void)
# 40 "lib\\Timer\\src/HWTimer.h"
                    ;





# 45 "lib\\Timer\\src/HWTimer.h" 3
extern "C" void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_11 (void)
# 45 "lib\\Timer\\src/HWTimer.h"
                   ;




# 49 "lib\\Timer\\src/HWTimer.h" 3
extern "C" void __vector_4 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_4 (void)
# 49 "lib\\Timer\\src/HWTimer.h"
                    ;





# 54 "lib\\Timer\\src/HWTimer.h" 3
extern "C" void __vector_5 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_5 (void)
# 54 "lib\\Timer\\src/HWTimer.h"
                   ;



# 57 "lib\\Timer\\src/HWTimer.h" 3
extern "C" void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_7 (void)
# 57 "lib\\Timer\\src/HWTimer.h"
                     ;

# 58 "lib\\Timer\\src/HWTimer.h" 3
extern "C" void __vector_8 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_8 (void)
# 58 "lib\\Timer\\src/HWTimer.h"
                     ;




# 62 "lib\\Timer\\src/HWTimer.h" 3
extern "C" void __vector_9 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_9 (void)
# 62 "lib\\Timer\\src/HWTimer.h"
                   ;

# 63 "lib\\Timer\\src/HWTimer.h" 3
extern "C" void __vector_6 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_6 (void)
# 63 "lib\\Timer\\src/HWTimer.h"
                    ;
# 87 "lib\\Timer\\src/HWTimer.h"
typedef enum {
    HW_TIMER_CLOCK_NONE,
    HW_TIMER_CLOCK_NO_DIVIDE,
    HW_TIMER_CLOCK_DIVIDE_BY_8,
    HW_TIMER_CLOCK_DIVIDE_BY_64,
    HW_TIMER_CLOCK_DIVIDE_BY_256,
    HW_TIMER_CLOCK_DIVIDE_BY_1024,
    HW_TIMER_CLOCK_EXTERNAL_BY_FALLING_EDGE,
    HW_TIMER_CLOCK_EXTERNAL_BY_RISING_EDGE
} HWTimerClockSource_t;
# 110 "lib\\Timer\\src/HWTimer.h"
typedef enum {
    HW_TIMER2_CLOCK_NONE,
    HW_TIMER2_CLOCK_NO_DIVIDE,
    HW_TIMER2_CLOCK_DIVIDE_BY_8,
    HW_TIMER2_CLOCK_DIVIDE_BY_32,
    HW_TIMER2_CLOCK_DIVIDE_BY_64,
    HW_TIMER2_CLOCK_DIVIDE_BY_128,
    HW_TIMER2_CLOCK_DIVIDE_BY_256,
    HW_TIMER2_CLOCK_DIVIDE_BY_1024
} HWTimer2ClockSource_t;


typedef enum {
    HW_TIMER_INTERRUPT_OVERFLOW,
    HW_TIMER_INTERRUPT_COMPARE_MATCH_A,
    HW_TIMER_INTERRUPT_COMPARE_MATCH_B,
    HW_TIMER_INTERRUPT_COMPARE_MATCH_C,
    HW_TIMER_INTERRUPT_CAPTURE_INPUT
} HWTimerInterrupt_t;

typedef struct {
    volatile uint8_t *value;
    int8_t TOIEn: 4;
    int8_t OCIEnA: 4;
    int8_t OCIEnB: 4;
    int8_t OCIEnC: 4;
    int8_t ICIEn: 4;
} TIMSK_t;

class HWTimerClass {
protected:

    TIMSK_t _TIMSKn;
    volatile uint8_t *_TCCRnA;
    volatile uint8_t *_TCCRnB;
public:
    HWTimerClass();
    void setClockSource(HWTimerClockSource_t clockSource);
    void setInterruptEnabled(HWTimerInterrupt_t interrupt, bool enabled);
};

class HWTimer8Bit: public HWTimerClass {
protected:
    uint8_t _channelCount;

    void (*_onOverflow)();
    void (*_onCompareMatchA)();
    void (*_onCompareMatchB)();
public:

    volatile uint8_t *TCNTn;
    volatile uint8_t *OCRnA;
    volatile uint8_t *OCRnB;
    HWTimer8Bit();
    void setInterruptHandler(HWTimerInterrupt_t interrupt, void (*handler)());
};

class HWTimer0Class: public HWTimer8Bit {

    friend void 
# 169 "lib\\Timer\\src/HWTimer.h" 3
               __vector_10
# 169 "lib\\Timer\\src/HWTimer.h"
                               ();




    friend void 
# 174 "lib\\Timer\\src/HWTimer.h" 3
               __vector_11
# 174 "lib\\Timer\\src/HWTimer.h"
                              ();
public:
    HWTimer0Class();



};

extern HWTimer0Class HWTimer0;


class HWTimer2Class: public HWTimer8Bit {

    friend void 
# 187 "lib\\Timer\\src/HWTimer.h" 3
               __vector_4
# 187 "lib\\Timer\\src/HWTimer.h"
                               ();




    friend void 
# 192 "lib\\Timer\\src/HWTimer.h" 3
               __vector_5
# 192 "lib\\Timer\\src/HWTimer.h"
                              ();
public:
    HWTimer2Class();


    void setClockSource(HWTimer2ClockSource_t clockSource);

};

extern HWTimer2Class HWTimer2;


class HWTimer16Bit: public HWTimerClass {
protected:
    uint8_t _channelCount;

    void (*_onOverflow)();
    void (*_onCompareMatchA)();
    void (*_onCompareMatchB)();
    void (*_onCompareMatchC)();
    void (*_onCaptureInput)();
public:

    volatile uint16_t *TCNTn;
    volatile uint16_t *OCRnA;
    volatile uint16_t *OCRnB;
    volatile uint16_t *OCRnC;
    HWTimer16Bit();
    void setInterruptHandler(HWTimerInterrupt_t interrupt, void (*handler)());
};

class HWTimer1Class: public HWTimer16Bit {
    friend void 
# 224 "lib\\Timer\\src/HWTimer.h" 3
               __vector_7
# 224 "lib\\Timer\\src/HWTimer.h"
                                ();
    friend void 
# 225 "lib\\Timer\\src/HWTimer.h" 3
               __vector_8
# 225 "lib\\Timer\\src/HWTimer.h"
                                ();



    friend void 
# 229 "lib\\Timer\\src/HWTimer.h" 3
               __vector_9
# 229 "lib\\Timer\\src/HWTimer.h"
                              ();
    friend void 
# 230 "lib\\Timer\\src/HWTimer.h" 3
               __vector_6
# 230 "lib\\Timer\\src/HWTimer.h"
                               ();
public:
    HWTimer1Class();
};

extern HWTimer1Class HWTimer1;
# 9 "src\\main.cpp" 2

# 1 "lib\\TWI\\src/TWI.h" 1




# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 6 "lib\\TWI\\src/TWI.h" 2
# 34 "lib\\TWI\\src/TWI.h"
enum TWIPrescaller {
    TWI_PRESCALLER_NONE,
    TWI_PRESCALLER_DIVIDE_BY_4,
    TWI_PRESCALLER_DIVIDE_BY_16,
    TWI_PRESCALLER_DIVIDE_BY_64,
};

class TWIClass
{
public:



    void enable();




    void disable();






    uint8_t getError();






    void setAddress(uint8_t address);






    void setPrescaler(TWIPrescaller value);






    void setFrequency(uint32_t frequency);






    void read(uint8_t *value);






    void read(uint16_t *value);






    void read(uint32_t *value);






    void read(float *value);






    void read(uint8_t *data, uint8_t length);






    void write(uint8_t value);






    void write(uint16_t value);






    void write(uint32_t value);






    void write(float value);







    void write(uint8_t *data, uint8_t length);







    void receive(uint8_t address, uint8_t length);




    void start();






    void transmit(uint8_t address);






    void setOnTransmitHandler(void (*handler_ptr) ());






    void setOnReceiveHandler(void (*handler_ptr) ());






    void setOnRequestHandler(void (*handler_ptr) ());
};

extern TWIClass TWI;
# 11 "src\\main.cpp" 2





# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 1 3
# 45 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay_basic.h" 1 3
# 40 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay_basic.h" 3

# 40 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay_basic.h" 3
static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
# 80 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay_basic.h" 3
void
_delay_loop_1(uint8_t __count)
{
 __asm__ volatile (
  "1: dec %0" "\n\t"
  "brne 1b"
  : "=r" (__count)
  : "0" (__count)
 );
}
# 102 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay_basic.h" 3
void
_delay_loop_2(uint16_t __count)
{
 __asm__ volatile (
  "1: sbiw %0,1" "\n\t"
  "brne 1b"
  : "=w" (__count)
  : "0" (__count)
 );
}
# 46 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 2 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 1 3
# 121 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern "C" {





extern double cos(double __x) __attribute__((__const__));





extern double sin(double __x) __attribute__((__const__));





extern double tan(double __x) __attribute__((__const__));






extern double fabs(double __x) __attribute__((__const__));






extern double fmod(double __x, double __y) __attribute__((__const__));
# 168 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern double modf(double __x, double *__iptr);


extern float modff (float __x, float *__iptr);




extern double sqrt(double __x) __attribute__((__const__));


extern float sqrtf (float) __attribute__((__const__));




extern double cbrt(double __x) __attribute__((__const__));
# 195 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern double hypot (double __x, double __y) __attribute__((__const__));







extern double square(double __x) __attribute__((__const__));






extern double floor(double __x) __attribute__((__const__));






extern double ceil(double __x) __attribute__((__const__));
# 235 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern double frexp(double __x, int *__pexp);







extern double ldexp(double __x, int __exp) __attribute__((__const__));





extern double exp(double __x) __attribute__((__const__));





extern double cosh(double __x) __attribute__((__const__));





extern double sinh(double __x) __attribute__((__const__));





extern double tanh(double __x) __attribute__((__const__));







extern double acos(double __x) __attribute__((__const__));







extern double asin(double __x) __attribute__((__const__));






extern double atan(double __x) __attribute__((__const__));
# 299 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern double atan2(double __y, double __x) __attribute__((__const__));





extern double log(double __x) __attribute__((__const__));





extern double log10(double __x) __attribute__((__const__));





extern double pow(double __x, double __y) __attribute__((__const__));






extern int isnan(double __x) __attribute__((__const__));
# 334 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern int isinf(double __x) __attribute__((__const__));






__attribute__((__const__)) static inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
 "mov	%0, %C1		\n\t"
 "lsl	%0		\n\t"
 "mov	%0, %D1		\n\t"
 "rol	%0		"
 : "=r" (__exp)
 : "r" (__x) );
    return __exp != 0xff;
}






__attribute__((__const__)) static inline double copysign (double __x, double __y)
{
    __asm__ (
 "bst	%D2, 7	\n\t"
 "bld	%D0, 7	"
 : "=r" (__x)
 : "0" (__x), "r" (__y) );
    return __x;
}
# 377 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern int signbit (double __x) __attribute__((__const__));






extern double fdim (double __x, double __y) __attribute__((__const__));
# 393 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern double fma (double __x, double __y, double __z) __attribute__((__const__));







extern double fmax (double __x, double __y) __attribute__((__const__));







extern double fmin (double __x, double __y) __attribute__((__const__));






extern double trunc (double __x) __attribute__((__const__));
# 427 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern double round (double __x) __attribute__((__const__));
# 440 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern long lround (double __x) __attribute__((__const__));
# 454 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\math.h" 3
extern long lrint (double __x) __attribute__((__const__));



}
# 47 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 2 3
# 86 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
# 165 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
void
_delay_ms(double __ms)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((
# 174 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h"
          4000000L
# 174 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
               ) / 1e3) * __ms;
# 184 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 210 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
}
# 254 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
void
_delay_us(double __us)
{
 double __tmp ;



 uint32_t __ticks_dc;
 extern void __builtin_avr_delay_cycles(unsigned long);
 __tmp = ((
# 263 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h"
          4000000L
# 263 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
               ) / 1e6) * __us;
# 273 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
  __ticks_dc = (uint32_t)(ceil(fabs(__tmp)));


 __builtin_avr_delay_cycles(__ticks_dc);
# 299 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\delay.h" 3
}
# 17 "src\\main.cpp" 2


# 18 "src\\main.cpp"
volatile uint8_t timer;

void onTimer5CompareA() {

}

void toggle_port()
{
    
# 26 "src\\main.cpp" 3
   (*(volatile uint8_t *)((0x1B) + 0x20)) 
# 26 "src\\main.cpp"
         = ~
# 26 "src\\main.cpp" 3
            (*(volatile uint8_t *)((0x1B) + 0x20))
# 26 "src\\main.cpp"
                 ;
}

void twiOnRequest() {

}

int main()
{
    
# 35 "src\\main.cpp" 3
   (*(volatile uint8_t *)((0x1A) + 0x20)) 
# 35 "src\\main.cpp"
         |= 
# 35 "src\\main.cpp" 3
            (1 << (0))
# 35 "src\\main.cpp"
                    ;
    
# 36 "src\\main.cpp" 3
   (*(volatile uint8_t *)((0x1B) + 0x20)) 
# 36 "src\\main.cpp"
         &= ~
# 36 "src\\main.cpp" 3
             (1 << (0))
# 36 "src\\main.cpp"
                     ;

    TWI.setOnRequestHandler(twiOnRequest);

    *HWTimer0.TCNTn = 5;






    
# 47 "src\\main.cpp" 3
   __asm__ __volatile__ ("sei" ::: "memory")
# 47 "src\\main.cpp"
        ;

    ES.attach(1, toggle_port);

    while(true)
    {
        ES.dispatch();




    }
}
