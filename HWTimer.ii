# 1 "lib\\Timer\\src\\HWTimer.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "lib\\Timer\\src\\HWTimer.cpp"
# 1 "lib\\Timer\\src\\HWTimer.h" 1
# 9 "lib\\Timer\\src\\HWTimer.h"
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 1 3
# 37 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 1 3 4
# 9 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 3 4
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 1 3 4
# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4

# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 2 3 4
# 38 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 2 3
# 77 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 246 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\iom32a.h" 1 3
# 247 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 639 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\portpins.h" 1 3
# 640 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\common.h" 1 3
# 642 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\version.h" 1 3
# 644 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 1 3
# 248 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
} __fuse_t;
# 651 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\lock.h" 1 3
# 654 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 10 "lib\\Timer\\src\\HWTimer.h" 2
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\interrupt.h" 1 3
# 11 "lib\\Timer\\src\\HWTimer.h" 2
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 149 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 426 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 12 "lib\\Timer\\src\\HWTimer.h" 2
# 40 "lib\\Timer\\src\\HWTimer.h"
extern "C" void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_10 (void)
# 40 "lib\\Timer\\src\\HWTimer.h"
                    ;





# 45 "lib\\Timer\\src\\HWTimer.h" 3
extern "C" void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_11 (void)
# 45 "lib\\Timer\\src\\HWTimer.h"
                   ;




# 49 "lib\\Timer\\src\\HWTimer.h" 3
extern "C" void __vector_4 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_4 (void)
# 49 "lib\\Timer\\src\\HWTimer.h"
                    ;





# 54 "lib\\Timer\\src\\HWTimer.h" 3
extern "C" void __vector_5 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_5 (void)
# 54 "lib\\Timer\\src\\HWTimer.h"
                   ;



# 57 "lib\\Timer\\src\\HWTimer.h" 3
extern "C" void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_7 (void)
# 57 "lib\\Timer\\src\\HWTimer.h"
                     ;

# 58 "lib\\Timer\\src\\HWTimer.h" 3
extern "C" void __vector_8 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_8 (void)
# 58 "lib\\Timer\\src\\HWTimer.h"
                     ;




# 62 "lib\\Timer\\src\\HWTimer.h" 3
extern "C" void __vector_9 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_9 (void)
# 62 "lib\\Timer\\src\\HWTimer.h"
                   ;

# 63 "lib\\Timer\\src\\HWTimer.h" 3
extern "C" void __vector_6 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_6 (void)
# 63 "lib\\Timer\\src\\HWTimer.h"
                    ;
# 87 "lib\\Timer\\src\\HWTimer.h"
typedef enum {
    HW_TIMER_CLOCK_NONE,
    HW_TIMER_CLOCK_NO_DIVIDE,
    HW_TIMER_CLOCK_DIVIDE_BY_8,
    HW_TIMER_CLOCK_DIVIDE_BY_64,
    HW_TIMER_CLOCK_DIVIDE_BY_256,
    HW_TIMER_CLOCK_DIVIDE_BY_1024,
    HW_TIMER_CLOCK_EXTERNAL_BY_FALLING_EDGE,
    HW_TIMER_CLOCK_EXTERNAL_BY_RISING_EDGE
} HWTimerClockSource_t;
# 110 "lib\\Timer\\src\\HWTimer.h"
typedef enum {
    HW_TIMER2_CLOCK_NONE,
    HW_TIMER2_CLOCK_NO_DIVIDE,
    HW_TIMER2_CLOCK_DIVIDE_BY_8,
    HW_TIMER2_CLOCK_DIVIDE_BY_32,
    HW_TIMER2_CLOCK_DIVIDE_BY_64,
    HW_TIMER2_CLOCK_DIVIDE_BY_128,
    HW_TIMER2_CLOCK_DIVIDE_BY_256,
    HW_TIMER2_CLOCK_DIVIDE_BY_1024
} HWTimer2ClockSource_t;


typedef enum {
    HW_TIMER_INTERRUPT_OVERFLOW,
    HW_TIMER_INTERRUPT_COMPARE_MATCH_A,
    HW_TIMER_INTERRUPT_COMPARE_MATCH_B,
    HW_TIMER_INTERRUPT_COMPARE_MATCH_C,
    HW_TIMER_INTERRUPT_CAPTURE_INPUT
} HWTimerInterrupt_t;

typedef struct {
    volatile uint8_t *value;
    int8_t TOIEn: 4;
    int8_t OCIEnA: 4;
    int8_t OCIEnB: 4;
    int8_t OCIEnC: 4;
    int8_t ICIEn: 4;
} TIMSK_t;

class HWTimerClass {
protected:

    TIMSK_t _TIMSKn;
    volatile uint8_t *_TCCRnA;
    volatile uint8_t *_TCCRnB;
public:
    HWTimerClass();
    void setClockSource(HWTimerClockSource_t clockSource);
    void setInterruptEnabled(HWTimerInterrupt_t interrupt, bool enabled);
};

class HWTimer8Bit: public HWTimerClass {
protected:
    uint8_t _channelCount;

    void (*_onOverflow)();
    void (*_onCompareMatchA)();
    void (*_onCompareMatchB)();
public:

    volatile uint8_t *TCNTn;
    volatile uint8_t *OCRnA;
    volatile uint8_t *OCRnB;
    HWTimer8Bit();
    void setInterruptHandler(HWTimerInterrupt_t interrupt, void (*handler)());
};

class HWTimer0Class: public HWTimer8Bit {

    friend void 
# 169 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_10
# 169 "lib\\Timer\\src\\HWTimer.h"
                               ();




    friend void 
# 174 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_11
# 174 "lib\\Timer\\src\\HWTimer.h"
                              ();
public:
    HWTimer0Class();



};

extern HWTimer0Class HWTimer0;


class HWTimer2Class: public HWTimer8Bit {

    friend void 
# 187 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_4
# 187 "lib\\Timer\\src\\HWTimer.h"
                               ();




    friend void 
# 192 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_5
# 192 "lib\\Timer\\src\\HWTimer.h"
                              ();
public:
    HWTimer2Class();


    void setClockSource(HWTimer2ClockSource_t clockSource);

};

extern HWTimer2Class HWTimer2;


class HWTimer16Bit: public HWTimerClass {
protected:
    uint8_t _channelCount;

    void (*_onOverflow)();
    void (*_onCompareMatchA)();
    void (*_onCompareMatchB)();
    void (*_onCompareMatchC)();
    void (*_onCaptureInput)();
public:

    volatile uint16_t *TCNTn;
    volatile uint16_t *OCRnA;
    volatile uint16_t *OCRnB;
    volatile uint16_t *OCRnC;
    HWTimer16Bit();
    void setInterruptHandler(HWTimerInterrupt_t interrupt, void (*handler)());
};

class HWTimer1Class: public HWTimer16Bit {
    friend void 
# 224 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_7
# 224 "lib\\Timer\\src\\HWTimer.h"
                                ();
    friend void 
# 225 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_8
# 225 "lib\\Timer\\src\\HWTimer.h"
                                ();



    friend void 
# 229 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_9
# 229 "lib\\Timer\\src\\HWTimer.h"
                              ();
    friend void 
# 230 "lib\\Timer\\src\\HWTimer.h" 3
               __vector_6
# 230 "lib\\Timer\\src\\HWTimer.h"
                               ();
public:
    HWTimer1Class();
};

extern HWTimer1Class HWTimer1;
# 2 "lib\\Timer\\src\\HWTimer.cpp" 2



# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 6 "lib\\Timer\\src\\HWTimer.cpp" 2


HWTimerClass::HWTimerClass() = default;

void HWTimerClass::setClockSource(HWTimerClockSource_t clockSource) {
    *_TCCRnB = (uint8_t) ((*_TCCRnB & 0b11111000) | clockSource);
}

void HWTimerClass::setInterruptEnabled(HWTimerInterrupt_t interrupt, bool enabled) {
    int8_t flag = -1;

    volatile uint8_t *value = _TIMSKn.value;

    switch (interrupt) {
        case HW_TIMER_INTERRUPT_OVERFLOW:
            flag = _TIMSKn.TOIEn;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_A:
            flag = _TIMSKn.OCIEnA;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_B:
            flag = _TIMSKn.OCIEnB;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_C:






            flag = _TIMSKn.OCIEnC;
            break;
        case HW_TIMER_INTERRUPT_CAPTURE_INPUT:
            flag = _TIMSKn.ICIEn;
            break;
    }

    if (flag >= 0) {
        *value = (uint8_t) ((*value & ~
# 44 "lib\\Timer\\src\\HWTimer.cpp" 3
                                      (1 << (
# 44 "lib\\Timer\\src\\HWTimer.cpp"
                                      flag
# 44 "lib\\Timer\\src\\HWTimer.cpp" 3
                                      ))
# 44 "lib\\Timer\\src\\HWTimer.cpp"
                                               ) | (enabled << flag));
    }
}

HWTimer8Bit::HWTimer8Bit() = default;

void HWTimer8Bit::setInterruptHandler(HWTimerInterrupt_t interrupt, void (*handler)()) {
    switch (interrupt) {
        case HW_TIMER_INTERRUPT_OVERFLOW:
            _onOverflow = handler;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_A:
            _onCompareMatchA = handler;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_B:
            _onCompareMatchB = handler;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_C:
        case HW_TIMER_INTERRUPT_CAPTURE_INPUT:
            break;
    }
}

HWTimer0Class::HWTimer0Class() : HWTimer8Bit() {
    TCNTn = &
# 68 "lib\\Timer\\src\\HWTimer.cpp" 3
            (*(volatile uint8_t *)((0x32) + 0x20))
# 68 "lib\\Timer\\src\\HWTimer.cpp"
                 ;

    _TIMSKn = {
        .value = &
# 71 "lib\\Timer\\src\\HWTimer.cpp" 3
                  (*(volatile uint8_t *)((0x39) + 0x20))
# 71 "lib\\Timer\\src\\HWTimer.cpp"
                       ,
        .TOIEn = 
# 72 "lib\\Timer\\src\\HWTimer.cpp" 3
                 0
# 72 "lib\\Timer\\src\\HWTimer.cpp"
                      ,
        .OCIEnA = 
# 73 "lib\\Timer\\src\\HWTimer.cpp" 3
                 1
# 73 "lib\\Timer\\src\\HWTimer.cpp"
                      ,
        .OCIEnB = -1,
        .OCIEnC = -1,
        .ICIEn = -1,
    };

    _TCCRnA = &
# 79 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x33) + 0x20))
# 79 "lib\\Timer\\src\\HWTimer.cpp"
                   ;
    _TCCRnB = &
# 80 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x33) + 0x20))
# 80 "lib\\Timer\\src\\HWTimer.cpp"
                   ;
    OCRnA = &
# 81 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x3C) + 0x20))
# 81 "lib\\Timer\\src\\HWTimer.cpp"
                  ;
    OCRnB = 
# 82 "lib\\Timer\\src\\HWTimer.cpp" 3 4
             __null
# 82 "lib\\Timer\\src\\HWTimer.cpp"
                 ;
    _channelCount = 1;
# 100 "lib\\Timer\\src\\HWTimer.cpp"
}







HWTimer0Class HWTimer0;



# 111 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_10 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_10 (void)

# 112 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer0._onCompareMatchA) {
        HWTimer0._onCompareMatchA();
    }
}
# 131 "lib\\Timer\\src\\HWTimer.cpp"

# 131 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_11 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_11 (void)

# 132 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer0._onOverflow) {
        HWTimer0._onOverflow();
    }
}


HWTimer2Class::HWTimer2Class() : HWTimer8Bit() {
    TCNTn = &
# 140 "lib\\Timer\\src\\HWTimer.cpp" 3
            (*(volatile uint8_t *)((0x24) + 0x20))
# 140 "lib\\Timer\\src\\HWTimer.cpp"
                 ;

    _TIMSKn = {
        .value = &
# 143 "lib\\Timer\\src\\HWTimer.cpp" 3
                  (*(volatile uint8_t *)((0x39) + 0x20))
# 143 "lib\\Timer\\src\\HWTimer.cpp"
                       ,
        .TOIEn = 
# 144 "lib\\Timer\\src\\HWTimer.cpp" 3
                 6
# 144 "lib\\Timer\\src\\HWTimer.cpp"
                      ,
        .OCIEnA = 
# 145 "lib\\Timer\\src\\HWTimer.cpp" 3
                 7
# 145 "lib\\Timer\\src\\HWTimer.cpp"
                      ,
        .OCIEnB = -1,
        .OCIEnC = -1,
        .ICIEn = -1,
    };

    _TCCRnA = &
# 151 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x25) + 0x20))
# 151 "lib\\Timer\\src\\HWTimer.cpp"
                   ;
    _TCCRnB = &
# 152 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x25) + 0x20))
# 152 "lib\\Timer\\src\\HWTimer.cpp"
                   ;
    OCRnA = &
# 153 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x23) + 0x20))
# 153 "lib\\Timer\\src\\HWTimer.cpp"
                  ;
    OCRnB = 
# 154 "lib\\Timer\\src\\HWTimer.cpp" 3 4
             __null
# 154 "lib\\Timer\\src\\HWTimer.cpp"
                 ;
    _channelCount = 1;
# 172 "lib\\Timer\\src\\HWTimer.cpp"
}



void HWTimer2Class::setClockSource(HWTimer2ClockSource_t clockSource) {
    HWTimerClass::setClockSource((HWTimerClockSource_t) ((uint8_t) clockSource));
}


HWTimer2Class HWTimer2;



# 184 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_4 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_4 (void)

# 185 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer2._onCompareMatchA) {
        HWTimer2._onCompareMatchA();
    }
}
# 204 "lib\\Timer\\src\\HWTimer.cpp"

# 204 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_5 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_5 (void)

# 205 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer2._onOverflow) {
        HWTimer2._onOverflow();
    }
}


HWTimer16Bit::HWTimer16Bit() = default;

void HWTimer16Bit::setInterruptHandler(HWTimerInterrupt_t interrupt, void (*handler)()) {
    switch (interrupt) {
        case HW_TIMER_INTERRUPT_OVERFLOW:
            _onOverflow = handler;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_A:
            _onCompareMatchA = handler;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_B:
            _onCompareMatchB = handler;
            break;
        case HW_TIMER_INTERRUPT_COMPARE_MATCH_C:
            _onCompareMatchC = handler;
            break;
        case HW_TIMER_INTERRUPT_CAPTURE_INPUT:
            _onCaptureInput = handler;
            break;
    }
}

HWTimer1Class::HWTimer1Class(): HWTimer16Bit() {

    _TIMSKn = {
        .value = &
# 237 "lib\\Timer\\src\\HWTimer.cpp" 3
                  (*(volatile uint8_t *)((0x39) + 0x20))
# 237 "lib\\Timer\\src\\HWTimer.cpp"
                       ,
        .TOIEn = 
# 238 "lib\\Timer\\src\\HWTimer.cpp" 3
                 2
# 238 "lib\\Timer\\src\\HWTimer.cpp"
                      ,
        .OCIEnA = 
# 239 "lib\\Timer\\src\\HWTimer.cpp" 3
                 4
# 239 "lib\\Timer\\src\\HWTimer.cpp"
                       ,
        .OCIEnB = 
# 240 "lib\\Timer\\src\\HWTimer.cpp" 3
                 3
# 240 "lib\\Timer\\src\\HWTimer.cpp"
                       ,



        .OCIEnC = -1,

        .ICIEn = 
# 246 "lib\\Timer\\src\\HWTimer.cpp" 3
                 5
# 246 "lib\\Timer\\src\\HWTimer.cpp"
                       ,
    };
# 259 "lib\\Timer\\src\\HWTimer.cpp"
    _TCCRnA = &
# 259 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x2F) + 0x20))
# 259 "lib\\Timer\\src\\HWTimer.cpp"
                    ;
    _TCCRnB = &
# 260 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint8_t *)((0x2E) + 0x20))
# 260 "lib\\Timer\\src\\HWTimer.cpp"
                    ;
    TCNTn = &
# 261 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint16_t *)((0x2C) + 0x20))
# 261 "lib\\Timer\\src\\HWTimer.cpp"
                   ;
    OCRnA = &
# 262 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint16_t *)((0x2A) + 0x20))
# 262 "lib\\Timer\\src\\HWTimer.cpp"
                   ;
    OCRnB = &
# 263 "lib\\Timer\\src\\HWTimer.cpp" 3
              (*(volatile uint16_t *)((0x28) + 0x20))
# 263 "lib\\Timer\\src\\HWTimer.cpp"
                   ;




    OCRnC = 
# 268 "lib\\Timer\\src\\HWTimer.cpp" 3 4
             __null
# 268 "lib\\Timer\\src\\HWTimer.cpp"
                 ;
    _channelCount = 2;

}

HWTimer1Class HWTimer1;


# 275 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_7 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_7 (void)

# 276 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer1._onCompareMatchA) {
        HWTimer1._onCompareMatchA();
    }
}

# 281 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_8 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_8 (void)

# 282 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer1._onCompareMatchB) {
        HWTimer1._onCompareMatchB();
    }
}
# 295 "lib\\Timer\\src\\HWTimer.cpp"

# 295 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_9 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_9 (void)

# 296 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer1._onOverflow) {
        HWTimer1._onOverflow();
    }
}

# 301 "lib\\Timer\\src\\HWTimer.cpp" 3
extern "C" void __vector_6 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_6 (void)

# 302 "lib\\Timer\\src\\HWTimer.cpp"
{
    if (HWTimer1._onCaptureInput) {
        HWTimer1._onCaptureInput();
    }
}
