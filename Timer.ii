# 1 "lib\\Timer\\src\\Timer.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "lib\\Timer\\src\\Timer.cpp"
# 1 "lib\\Timer\\src\\Timer.h" 1






# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 1 3
# 37 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 1 3 4
# 9 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 3 4
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 1 3 4
# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4

# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 2 3 4
# 38 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 2 3
# 77 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 246 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\iom32a.h" 1 3
# 247 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 639 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\portpins.h" 1 3
# 640 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\common.h" 1 3
# 642 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\version.h" 1 3
# 644 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 1 3
# 248 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
} __fuse_t;
# 651 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\lock.h" 1 3
# 654 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 8 "lib\\Timer\\src\\Timer.h" 2
# 18 "lib\\Timer\\src\\Timer.h"

# 18 "lib\\Timer\\src\\Timer.h"
typedef void (*TimerInterruptHandler_t) ();

enum TimerClockSource {
    TIMER_CLOCK_NONE,
    TIMER_CLOCK_NO_DIVIDE,
    TIMER_CLOCK_DIVIDE_BY_8,
    TIMER_CLOCK_DIVIDE_BY_64,
    TIMER_CLOCK_DIVIDE_BY_256,
    TIMER_CLOCK_DIVIDE_BY_1024,
    TIMER_CLOCK_EXTERNAL_BY_FALLING_EDGE,
    TIMER_CLOCK_EXTERNAL_BY_RISING_EDGE
};

enum TimerWaveformGenerationMode {
    TIMER_WGM_NORMAL,
    TIMER_WGM_PWM_PHASE_CORRECT_8,
    TIMER_WGM_PWM_PHASE_CORRECT_9,
    TIMER_WGM_PWM_PHASE_CORRECT_10,
    TIMER_WGM_CTC_BY_OCR,
    TIMER_WGM_FAST_PWM_8,
    TIMER_WGM_FAST_PWM_9,
    TIMER_WGM_FAST_PWM_10,
    TIMER_WGM_PWM_PHASE_FREQ_CORRECT_BY_ICR,
    TIMER_WGM_PWM_PHASE_FREQ_CORRECT_BY_OCR,
    TIMER_WGM_PWM_PHASE_CORRECT_BY_ICR,
    TIMER_WGM_PWM_PHASE_CORRECT_BY_OCR,
    TIMER_WGM_CTC_BY_ICR,
    TIMER_WGM_RESERVED,
    TIMER_WGM_FAST_PWM_BY_ICR,
    TIMER_WGM_FAST_PWM_BY_OCR,
};

enum TimerOutputCompareMode {
    TIMER_OUTPUT_COMPARE_DISABLED,
    TIMER_OUTPUT_COMPARE_TOGGLE,
    TIMER_OUTPUT_COMPARE_CLEAR_UP,
    TIMER_OUTPUT_COMPARE_SET_UP
};

typedef void (*TimerInterruptHandler_t) ();

class Timer8BitClass {
protected:
    volatile uint8_t *TCCR_A;
    volatile uint8_t *TCCR_B;
    volatile uint8_t *TCNT;

    volatile TimerInterruptHandler_t handlers[1];
public:



    void setClockSource(TimerClockSource clockSource);




    uint8_t getCounterValue();




    void setCounterValue(uint8_t value);





    void setInterruptHandler(uint8_t code, TimerInterruptHandler_t handlerPtr);




    void triggerInterrupt(uint8_t code);
};

class Timer16BitClass {
protected:
    volatile uint8_t *TCCR_A;
    volatile uint8_t *TCCR_B;
    volatile uint16_t *TCNT;
    volatile uint16_t *OCR_A;
    volatile uint16_t *OCR_B;
    volatile uint16_t *ICR;

    volatile TimerInterruptHandler_t handlers[1];
public:



    void setClockSource(TimerClockSource clockSource);




    void setWaveformGenerationMode(TimerWaveformGenerationMode mode);




    void setOutputCompareModeA(TimerOutputCompareMode mode);




    void setOutputCompareModeB(TimerOutputCompareMode mode);




    uint16_t getCounterValue();




    void setCounterValue(uint16_t value);




    uint16_t getCompareValueA();




    void setCompareValueA(uint16_t value);




    uint16_t getCompareValueB();




    void setCompareValueB(uint16_t value);




    uint16_t getCaptureValue();




    void setCaptureValue(uint16_t value);





    void setInterruptHandler(uint8_t code, TimerInterruptHandler_t handlerPtr);




    void triggerInterrupt(uint8_t code);
};



enum Timer1Interrupt {
    TIMER1_ISR_OVERFLOW = 
# 180 "lib\\Timer\\src\\Timer.h" 3
                         2
    
# 181 "lib\\Timer\\src\\Timer.h"
   ,TIMER1_ISR_OUTPUT_COMPARE_A = 
# 181 "lib\\Timer\\src\\Timer.h" 3
                                  4
    
# 182 "lib\\Timer\\src\\Timer.h"
   ,TIMER1_ISR_OUTPUT_COMPARE_B = 
# 182 "lib\\Timer\\src\\Timer.h" 3
                                  3






    
# 189 "lib\\Timer\\src\\Timer.h"
   ,TIMER1_ISR_INPUT_CAPTURE = 
# 189 "lib\\Timer\\src\\Timer.h" 3
                               5


# 191 "lib\\Timer\\src\\Timer.h"
};

class Timer1Class {
private:
    volatile TimerInterruptHandler_t handlers[8];
public:



    void setClockSource(TimerClockSource clockSource) {
        
# 201 "lib\\Timer\\src\\Timer.h" 3
       (*(volatile uint8_t *)((0x2E) + 0x20)) 
# 201 "lib\\Timer\\src\\Timer.h"
              = (uint8_t) ((
# 201 "lib\\Timer\\src\\Timer.h" 3
                            (*(volatile uint8_t *)((0x2E) + 0x20)) 
# 201 "lib\\Timer\\src\\Timer.h"
                                   & 0b11111000) | clockSource);
    }





    void setInterruptHandler(Timer1Interrupt code, TimerInterruptHandler_t handlerPtr) {
        this->handlers[code] = handlerPtr;

        if (handlerPtr) {



            
# 215 "lib\\Timer\\src\\Timer.h" 3
           (*(volatile uint8_t *)((0x39) + 0x20)) 
# 215 "lib\\Timer\\src\\Timer.h"
                 |= 
# 215 "lib\\Timer\\src\\Timer.h" 3
                    (1 << (
# 215 "lib\\Timer\\src\\Timer.h"
                    code
# 215 "lib\\Timer\\src\\Timer.h" 3
                    ))
# 215 "lib\\Timer\\src\\Timer.h"
                             ;

        } else {



            
# 221 "lib\\Timer\\src\\Timer.h" 3
           (*(volatile uint8_t *)((0x39) + 0x20)) 
# 221 "lib\\Timer\\src\\Timer.h"
                 &= ~
# 221 "lib\\Timer\\src\\Timer.h" 3
                     (1 << (
# 221 "lib\\Timer\\src\\Timer.h"
                     code
# 221 "lib\\Timer\\src\\Timer.h" 3
                     ))
# 221 "lib\\Timer\\src\\Timer.h"
                              ;

        }
    }




    void triggerInterrupt(Timer1Interrupt code) {
        if (this->handlers[code]) {
            this->handlers[code]();
        }
    }
};

Timer1Class Timer1;





enum Timer2Interrupt {
    TIMER2_ISR_OVERFLOW = 
# 243 "lib\\Timer\\src\\Timer.h" 3
                         6




    
# 248 "lib\\Timer\\src\\Timer.h"
   ,TIMER2_ISR_OUTPUT_COMPARE_A = 
# 248 "lib\\Timer\\src\\Timer.h" 3
                                  7


# 250 "lib\\Timer\\src\\Timer.h"
};

class Timer2Class {
private:
    volatile TimerInterruptHandler_t handlers[8];
public:



    void setClockSource(TimerClockSource clockSource) {



        
# 263 "lib\\Timer\\src\\Timer.h" 3
       (*(volatile uint8_t *)((0x25) + 0x20)) 
# 263 "lib\\Timer\\src\\Timer.h"
             = (uint8_t) ((
# 263 "lib\\Timer\\src\\Timer.h" 3
                           (*(volatile uint8_t *)((0x25) + 0x20)) 
# 263 "lib\\Timer\\src\\Timer.h"
                                 & 0b11111000) | clockSource);

    }





    void setInterruptHandler(Timer2Interrupt code, TimerInterruptHandler_t handlerPtr) {
        this->handlers[code] = handlerPtr;

        if (handlerPtr) {



            
# 278 "lib\\Timer\\src\\Timer.h" 3
           (*(volatile uint8_t *)((0x39) + 0x20)) 
# 278 "lib\\Timer\\src\\Timer.h"
                 |= 
# 278 "lib\\Timer\\src\\Timer.h" 3
                    (1 << (
# 278 "lib\\Timer\\src\\Timer.h"
                    code
# 278 "lib\\Timer\\src\\Timer.h" 3
                    ))
# 278 "lib\\Timer\\src\\Timer.h"
                             ;

        } else {



            
# 284 "lib\\Timer\\src\\Timer.h" 3
           (*(volatile uint8_t *)((0x39) + 0x20)) 
# 284 "lib\\Timer\\src\\Timer.h"
                 &= ~
# 284 "lib\\Timer\\src\\Timer.h" 3
                     (1 << (
# 284 "lib\\Timer\\src\\Timer.h"
                     code
# 284 "lib\\Timer\\src\\Timer.h" 3
                     ))
# 284 "lib\\Timer\\src\\Timer.h"
                              ;

        }
    }




    void triggerInterrupt(Timer2Interrupt code) {
        if (this->handlers[code]) {
            this->handlers[code]();
        }
    }
};
# 2 "lib\\Timer\\src\\Timer.cpp" 2

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\interrupt.h" 1 3
# 4 "lib\\Timer\\src\\Timer.cpp" 2



void Timer8BitClass::setClockSource(TimerClockSource clockSource) {
    *this->TCCR_B = (uint8_t) ((*this->TCCR_B & 0b00000111) | clockSource);
}

uint8_t Timer8BitClass::getCounterValue() {
    return *this->TCNT;
}

void Timer8BitClass::setCounterValue(uint8_t value) {
    *this->TCNT = value;
}

void Timer8BitClass::setInterruptHandler(uint8_t code, TimerInterruptHandler_t handlerPtr) {
    this->handlers[code] = handlerPtr;
}

void Timer8BitClass::triggerInterrupt(uint8_t code) {
    if (this->handlers[code]) {
        this->handlers[code]();
    }
}

void Timer16BitClass::setClockSource(TimerClockSource clockSource) {
    *this->TCCR_B = (uint8_t) ((*this->TCCR_B & 0b00000111) | clockSource);
}

void Timer16BitClass::setWaveformGenerationMode(TimerWaveformGenerationMode mode) {
    *this->TCCR_A = (uint8_t) ((*this->TCCR_A & 0b11111100) | (mode & 0b0011));
    *this->TCCR_B = (uint8_t) ((*this->TCCR_B & 0b00011000) | ((mode & 0b1100) << 3));
}

void Timer16BitClass::setOutputCompareModeA(TimerOutputCompareMode mode) {
    *this->TCCR_A = (uint8_t) ((*this->TCCR_A & 0b00111111) | (mode << 6));
}

void Timer16BitClass::setOutputCompareModeB(TimerOutputCompareMode mode) {
    *this->TCCR_A = (uint8_t) ((*this->TCCR_A & 0b11001111) | (mode << 4));
}

uint16_t Timer16BitClass::getCounterValue() {
    return *this->TCNT;
}

void Timer16BitClass::setCounterValue(uint16_t value) {
    *this->TCNT = value;
}

uint16_t Timer16BitClass::getCompareValueA() {
    return *this->OCR_A;
}

void Timer16BitClass::setCompareValueA(uint16_t value) {
    *this->OCR_A = value;
}

uint16_t Timer16BitClass::getCompareValueB() {
    return *this->OCR_B;
}

void Timer16BitClass::setCompareValueB(uint16_t value) {
    *this->OCR_B = value;
}

uint16_t Timer16BitClass::getCaptureValue() {
    return *this->ICR;
}

void Timer16BitClass::setCaptureValue(uint16_t value) {
    *this->ICR = value;
}

void Timer16BitClass::setInterruptHandler(uint8_t code, TimerInterruptHandler_t handlerPtr) {
    this->handlers[code] = handlerPtr;
}

void Timer16BitClass::triggerInterrupt(uint8_t code) {
    if (this->handlers[code]) {
        this->handlers[code]();
    }
}
