# 1 "lib\\TWI\\src\\TWI.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "lib\\TWI\\src\\TWI.cpp"
# 1 "lib\\TWI\\src\\TWI.h" 1



# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 1 3 4
# 9 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 3 4
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 1 3 4
# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4

# 125 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 2 3 4
# 5 "lib\\TWI\\src\\TWI.h" 2
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 1 3 4
# 149 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 426 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\lib\\gcc\\avr\\5.4.0\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 6 "lib\\TWI\\src\\TWI.h" 2
# 34 "lib\\TWI\\src\\TWI.h"

# 34 "lib\\TWI\\src\\TWI.h"
enum TWIPrescaller {
    TWI_PRESCALLER_NONE,
    TWI_PRESCALLER_DIVIDE_BY_4,
    TWI_PRESCALLER_DIVIDE_BY_16,
    TWI_PRESCALLER_DIVIDE_BY_64,
};

class TWIClass
{
public:



    void enable();




    void disable();






    uint8_t getError();






    void setAddress(uint8_t address);






    void setPrescaler(TWIPrescaller value);






    void setFrequency(uint32_t frequency);






    void read(uint8_t *value);






    void read(uint16_t *value);






    void read(uint32_t *value);






    void read(float *value);






    void read(uint8_t *data, uint8_t length);






    void write(uint8_t value);






    void write(uint16_t value);






    void write(uint32_t value);






    void write(float value);







    void write(uint8_t *data, uint8_t length);







    void receive(uint8_t address, uint8_t length);




    void start();






    void transmit(uint8_t address);






    void setOnTransmitHandler(void (*handler_ptr) ());






    void setOnReceiveHandler(void (*handler_ptr) ());






    void setOnRequestHandler(void (*handler_ptr) ());
};

extern TWIClass TWI;
# 2 "lib\\TWI\\src\\TWI.cpp" 2

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\interrupt.h" 1 3
# 38 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\interrupt.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 1 3
# 77 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3

# 77 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 246 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\iom32a.h" 1 3
# 247 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 639 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\portpins.h" 1 3
# 640 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\common.h" 1 3
# 642 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\version.h" 1 3
# 644 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 1 3
# 248 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
} __fuse_t;
# 651 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\lock.h" 1 3
# 654 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\io.h" 2 3
# 39 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\avr\\interrupt.h" 2 3
# 4 "lib\\TWI\\src\\TWI.cpp" 2


# 1 "c:\\users\\master\\.platformio\\packages\\toolchain-atmelavr\\avr\\include\\util\\twi.h" 1 3
# 7 "lib\\TWI\\src\\TWI.cpp" 2






# 12 "lib\\TWI\\src\\TWI.cpp"
static volatile uint8_t state;
static volatile uint8_t error;
static volatile uint8_t addressAndRW;
static volatile uint8_t isRepeatedStart;
static volatile uint8_t sendStop;

static void (*onTransmitHandler) ();
static void (*onReceiveHandler) ();
static void (*onRequestHandler) ();

static uint8_t txBufferData[32];
static volatile uint8_t txBufferIndex;
static volatile uint8_t txBufferLength;

static uint8_t rxBufferData[32];
static volatile uint8_t rxBufferIndex;
static volatile uint8_t rxBufferLength;

void TWIClass::enable() {
    state = 0;
    sendStop = 1;
    isRepeatedStart = 0;




    this->setPrescaler(TWI_PRESCALLER_NONE);


    this->setFrequency(100000UL);


    
# 44 "lib\\TWI\\src\\TWI.cpp" 3
   (*(volatile uint8_t *)((0x36) + 0x20)) 
# 44 "lib\\TWI\\src\\TWI.cpp"
        = 
# 44 "lib\\TWI\\src\\TWI.cpp" 3
          (1 << (2)) 
# 44 "lib\\TWI\\src\\TWI.cpp"
                    | 
# 44 "lib\\TWI\\src\\TWI.cpp" 3
                      (1 << (0)) 
# 44 "lib\\TWI\\src\\TWI.cpp"
                                | 
# 44 "lib\\TWI\\src\\TWI.cpp" 3
                                  (1 << (6))
# 44 "lib\\TWI\\src\\TWI.cpp"
                                           ;
}

void TWIClass::disable() {

    
# 49 "lib\\TWI\\src\\TWI.cpp" 3
   (*(volatile uint8_t *)((0x36) + 0x20)) 
# 49 "lib\\TWI\\src\\TWI.cpp"
        &= ~(
# 49 "lib\\TWI\\src\\TWI.cpp" 3
             (1 << (2)) 
# 49 "lib\\TWI\\src\\TWI.cpp"
                       | 
# 49 "lib\\TWI\\src\\TWI.cpp" 3
                         (1 << (0)) 
# 49 "lib\\TWI\\src\\TWI.cpp"
                                   | 
# 49 "lib\\TWI\\src\\TWI.cpp" 3
                                     (1 << (6))
# 49 "lib\\TWI\\src\\TWI.cpp"
                                              );


}

uint8_t TWIClass::getError() {
    return error;
}

void TWIClass::setAddress(uint8_t address) {
    
# 59 "lib\\TWI\\src\\TWI.cpp" 3
   (*(volatile uint8_t *)((0x02) + 0x20)) 
# 59 "lib\\TWI\\src\\TWI.cpp"
        = address << 1;
}

void TWIClass::setPrescaler(TWIPrescaller value) {
    
# 63 "lib\\TWI\\src\\TWI.cpp" 3
   (*(volatile uint8_t *)((0x01) + 0x20)) 
# 63 "lib\\TWI\\src\\TWI.cpp"
        = (uint8_t) ((
# 63 "lib\\TWI\\src\\TWI.cpp" 3
                      (*(volatile uint8_t *)((0x01) + 0x20)) 
# 63 "lib\\TWI\\src\\TWI.cpp"
                           & 0b11111100) | value);
}

void TWIClass::setFrequency(uint32_t frequency) {




    
# 71 "lib\\TWI\\src\\TWI.cpp" 3
   (*(volatile uint8_t *)((0x00) + 0x20)) 
# 71 "lib\\TWI\\src\\TWI.cpp"
        = (uint8_t) (((4000000L / frequency) - 16) / 2);
}

void TWIClass::read(uint8_t *value) {
    if (rxBufferIndex < rxBufferLength) {
        *value = rxBufferData[rxBufferIndex++];
    } else {
        error = 0xF2;
    }
}

void TWIClass::read(uint16_t *value) {
    this->read((uint8_t *) &value, 2);
}

void TWIClass::read(uint32_t *value) {
    this->read((uint8_t *) &value, 4);
}

void TWIClass::read(float *value) {
    this->read((uint8_t *) &value, 4);
}

void TWIClass::read(uint8_t *data, uint8_t length) {
    for (uint8_t i = 0; i < length; i++) {
        this->read(&data[i]);
    }
}

void TWIClass::write(uint8_t value) {
    if (txBufferLength < 32) {
        txBufferData[txBufferIndex] = value;

        txBufferIndex++;
        txBufferLength++;
    } else {
        error = 0xF1;
    }
}

void TWIClass::write(uint16_t value) {
    this->write((uint8_t *) &value, 2);
}

void TWIClass::write(uint32_t value) {
    this->write((uint8_t *) &value, 4);
}

void TWIClass::write(float value) {
    this->write((uint8_t *) &value, 4);
}

void TWIClass::write(uint8_t *data, uint8_t length) {
    for (uint8_t i = 0; i < length; i++) {
        this->write(data[i]);
    }
}

void TWIClass::receive(uint8_t address, uint8_t length) {
    if (32 < length) {
        error = 0xF0;
        return;
    }


    while (0 != state);

    state = 1;



    error = 0xFF;

    rxBufferIndex = 0;
    rxBufferLength = length;
# 157 "lib\\TWI\\src\\TWI.cpp"
    addressAndRW = (uint8_t) ((address << 1) | 
# 157 "lib\\TWI\\src\\TWI.cpp" 3
                                              1
# 157 "lib\\TWI\\src\\TWI.cpp"
                                                     );

    if (isRepeatedStart) {
# 173 "lib\\TWI\\src\\TWI.cpp"
        isRepeatedStart = 0;

        do {
            
# 176 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x03) + 0x20)) 
# 176 "lib\\TWI\\src\\TWI.cpp"
                = addressAndRW;
        } while(
# 177 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 177 "lib\\TWI\\src\\TWI.cpp"
                    & 
# 177 "lib\\TWI\\src\\TWI.cpp" 3
                      (1 << (3))
# 177 "lib\\TWI\\src\\TWI.cpp"
                               );


        
# 180 "lib\\TWI\\src\\TWI.cpp" 3
       (*(volatile uint8_t *)((0x36) + 0x20)) 
# 180 "lib\\TWI\\src\\TWI.cpp"
            = 
# 180 "lib\\TWI\\src\\TWI.cpp" 3
              (1 << (7)) 
# 180 "lib\\TWI\\src\\TWI.cpp"
                         | 
# 180 "lib\\TWI\\src\\TWI.cpp" 3
                           (1 << (6)) 
# 180 "lib\\TWI\\src\\TWI.cpp"
                                     | 
# 180 "lib\\TWI\\src\\TWI.cpp" 3
                                       (1 << (2)) 
# 180 "lib\\TWI\\src\\TWI.cpp"
                                                 | 
# 180 "lib\\TWI\\src\\TWI.cpp" 3
                                                   (1 << (0))
# 180 "lib\\TWI\\src\\TWI.cpp"
                                                            ;
    } else {

        
# 183 "lib\\TWI\\src\\TWI.cpp" 3
       (*(volatile uint8_t *)((0x36) + 0x20)) 
# 183 "lib\\TWI\\src\\TWI.cpp"
            = 
# 183 "lib\\TWI\\src\\TWI.cpp" 3
              (1 << (2)) 
# 183 "lib\\TWI\\src\\TWI.cpp"
                        | 
# 183 "lib\\TWI\\src\\TWI.cpp" 3
                          (1 << (0)) 
# 183 "lib\\TWI\\src\\TWI.cpp"
                                    | 
# 183 "lib\\TWI\\src\\TWI.cpp" 3
                                      (1 << (6)) 
# 183 "lib\\TWI\\src\\TWI.cpp"
                                                | 
# 183 "lib\\TWI\\src\\TWI.cpp" 3
                                                  (1 << (7)) 
# 183 "lib\\TWI\\src\\TWI.cpp"
                                                             | 
# 183 "lib\\TWI\\src\\TWI.cpp" 3
                                                               (1 << (5))
# 183 "lib\\TWI\\src\\TWI.cpp"
                                                                         ;
    }
}

void TWIClass::start() {
    txBufferIndex = 0;
    txBufferLength = 0;
}

void TWIClass::transmit(uint8_t address) {
    if (32 < txBufferLength) {
        error = 0xF0;
        return;
    }


    while (0 != state);

    state = 2;
    error = 0xFF;



    addressAndRW = (uint8_t) ((address << 1) | 
# 206 "lib\\TWI\\src\\TWI.cpp" 3
                                              0
# 206 "lib\\TWI\\src\\TWI.cpp"
                                                      );

    if (isRepeatedStart) {
# 222 "lib\\TWI\\src\\TWI.cpp"
        isRepeatedStart = 0;

        do {
            
# 225 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x03) + 0x20)) 
# 225 "lib\\TWI\\src\\TWI.cpp"
                = addressAndRW;
        } while (
# 226 "lib\\TWI\\src\\TWI.cpp" 3
                (*(volatile uint8_t *)((0x36) + 0x20)) 
# 226 "lib\\TWI\\src\\TWI.cpp"
                     & 
# 226 "lib\\TWI\\src\\TWI.cpp" 3
                       (1 << (3))
# 226 "lib\\TWI\\src\\TWI.cpp"
                                );


        
# 229 "lib\\TWI\\src\\TWI.cpp" 3
       (*(volatile uint8_t *)((0x36) + 0x20)) 
# 229 "lib\\TWI\\src\\TWI.cpp"
            = 
# 229 "lib\\TWI\\src\\TWI.cpp" 3
              (1 << (7)) 
# 229 "lib\\TWI\\src\\TWI.cpp"
                         | 
# 229 "lib\\TWI\\src\\TWI.cpp" 3
                           (1 << (6)) 
# 229 "lib\\TWI\\src\\TWI.cpp"
                                     | 
# 229 "lib\\TWI\\src\\TWI.cpp" 3
                                       (1 << (2)) 
# 229 "lib\\TWI\\src\\TWI.cpp"
                                                 | 
# 229 "lib\\TWI\\src\\TWI.cpp" 3
                                                   (1 << (0))
# 229 "lib\\TWI\\src\\TWI.cpp"
                                                            ;
    } else {

        
# 232 "lib\\TWI\\src\\TWI.cpp" 3
       (*(volatile uint8_t *)((0x36) + 0x20)) 
# 232 "lib\\TWI\\src\\TWI.cpp"
            = 
# 232 "lib\\TWI\\src\\TWI.cpp" 3
              (1 << (7)) 
# 232 "lib\\TWI\\src\\TWI.cpp"
                         | 
# 232 "lib\\TWI\\src\\TWI.cpp" 3
                           (1 << (6)) 
# 232 "lib\\TWI\\src\\TWI.cpp"
                                     | 
# 232 "lib\\TWI\\src\\TWI.cpp" 3
                                       (1 << (2)) 
# 232 "lib\\TWI\\src\\TWI.cpp"
                                                 | 
# 232 "lib\\TWI\\src\\TWI.cpp" 3
                                                   (1 << (0)) 
# 232 "lib\\TWI\\src\\TWI.cpp"
                                                             | 
# 232 "lib\\TWI\\src\\TWI.cpp" 3
                                                               (1 << (5))
# 232 "lib\\TWI\\src\\TWI.cpp"
                                                                         ;
    }
}

void TWIClass::setOnTransmitHandler(void (*handler_ptr) ()) {
    onTransmitHandler = handler_ptr;
}

void TWIClass::setOnReceiveHandler(void (*handler_ptr) ()) {
    onReceiveHandler = handler_ptr;
}

void TWIClass::setOnRequestHandler(void (*handler_ptr) ()) {
    onRequestHandler = handler_ptr;
}

TWIClass TWI;


# 250 "lib\\TWI\\src\\TWI.cpp" 3
extern "C" void __vector_19 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_19 (void)

# 251 "lib\\TWI\\src\\TWI.cpp"
{
    switch(
# 252 "lib\\TWI\\src\\TWI.cpp" 3
          ((*(volatile uint8_t *)((0x01) + 0x20)) & ((1 << (7))|(1 << (6))|(1 << (5))|(1 << (4))| (1 << (3))))
# 252 "lib\\TWI\\src\\TWI.cpp"
                   ) {

        case 
# 254 "lib\\TWI\\src\\TWI.cpp" 3
            0x08
# 254 "lib\\TWI\\src\\TWI.cpp"
                    :
        case 
# 255 "lib\\TWI\\src\\TWI.cpp" 3
            0x10
# 255 "lib\\TWI\\src\\TWI.cpp"
                        :

            
# 257 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x03) + 0x20)) 
# 257 "lib\\TWI\\src\\TWI.cpp"
                = addressAndRW;
            (
# 258 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 258 "lib\\TWI\\src\\TWI.cpp"
           = 
# 258 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 258 "lib\\TWI\\src\\TWI.cpp"
           | 
# 258 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 258 "lib\\TWI\\src\\TWI.cpp"
           | 
# 258 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 258 "lib\\TWI\\src\\TWI.cpp"
           | 
# 258 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (6))
# 258 "lib\\TWI\\src\\TWI.cpp"
           );
            break;



        case 
# 263 "lib\\TWI\\src\\TWI.cpp" 3
            0x18
# 263 "lib\\TWI\\src\\TWI.cpp"
                         :
        case 
# 264 "lib\\TWI\\src\\TWI.cpp" 3
            0x28
# 264 "lib\\TWI\\src\\TWI.cpp"
                          :

            if (txBufferIndex < txBufferLength) {

                
# 268 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x03) + 0x20)) 
# 268 "lib\\TWI\\src\\TWI.cpp"
                    = txBufferData[txBufferIndex++];
                (
# 269 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 269 "lib\\TWI\\src\\TWI.cpp"
               = 
# 269 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 269 "lib\\TWI\\src\\TWI.cpp"
               | 
# 269 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 269 "lib\\TWI\\src\\TWI.cpp"
               | 
# 269 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0)) 
# 269 "lib\\TWI\\src\\TWI.cpp"
               | 
# 269 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (6))
# 269 "lib\\TWI\\src\\TWI.cpp"
               );
            } else {
                if (sendStop) {
                    (
# 272 "lib\\TWI\\src\\TWI.cpp" 3
                   (*(volatile uint8_t *)((0x36) + 0x20)) 
# 272 "lib\\TWI\\src\\TWI.cpp"
                   = 
# 272 "lib\\TWI\\src\\TWI.cpp" 3
                   (1 << (7)) 
# 272 "lib\\TWI\\src\\TWI.cpp"
                   | 
# 272 "lib\\TWI\\src\\TWI.cpp" 3
                   (1 << (2)) 
# 272 "lib\\TWI\\src\\TWI.cpp"
                   | 
# 272 "lib\\TWI\\src\\TWI.cpp" 3
                   (1 << (0)) 
# 272 "lib\\TWI\\src\\TWI.cpp"
                   | 
# 272 "lib\\TWI\\src\\TWI.cpp" 3
                   (1 << (4))
# 272 "lib\\TWI\\src\\TWI.cpp"
                   );
                    state = 0;

                    if (onTransmitHandler) {
                        onTransmitHandler();
                    }
                } else {
                    isRepeatedStart = 1;







                    
# 287 "lib\\TWI\\src\\TWI.cpp" 3
                   (*(volatile uint8_t *)((0x36) + 0x20)) 
# 287 "lib\\TWI\\src\\TWI.cpp"
                        = 
# 287 "lib\\TWI\\src\\TWI.cpp" 3
                          (1 << (7)) 
# 287 "lib\\TWI\\src\\TWI.cpp"
                                     | 
# 287 "lib\\TWI\\src\\TWI.cpp" 3
                                       (1 << (5)) 
# 287 "lib\\TWI\\src\\TWI.cpp"
                                                  | 
# 287 "lib\\TWI\\src\\TWI.cpp" 3
                                                    (1 << (2))
# 287 "lib\\TWI\\src\\TWI.cpp"
                                                             ;
                    state = 0;
                }
            }
            break;
        case 
# 292 "lib\\TWI\\src\\TWI.cpp" 3
            0x20
# 292 "lib\\TWI\\src\\TWI.cpp"
                          :
            error = 
# 293 "lib\\TWI\\src\\TWI.cpp" 3
                   0x20
# 293 "lib\\TWI\\src\\TWI.cpp"
                                 ;
            (
# 294 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 294 "lib\\TWI\\src\\TWI.cpp"
           = 
# 294 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 294 "lib\\TWI\\src\\TWI.cpp"
           | 
# 294 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 294 "lib\\TWI\\src\\TWI.cpp"
           | 
# 294 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 294 "lib\\TWI\\src\\TWI.cpp"
           | 
# 294 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (4))
# 294 "lib\\TWI\\src\\TWI.cpp"
           );
            state = 0;
            break;
        case 
# 297 "lib\\TWI\\src\\TWI.cpp" 3
            0x30
# 297 "lib\\TWI\\src\\TWI.cpp"
                           :
            error = 
# 298 "lib\\TWI\\src\\TWI.cpp" 3
                   0x30
# 298 "lib\\TWI\\src\\TWI.cpp"
                                  ;
            (
# 299 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 299 "lib\\TWI\\src\\TWI.cpp"
           = 
# 299 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 299 "lib\\TWI\\src\\TWI.cpp"
           | 
# 299 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 299 "lib\\TWI\\src\\TWI.cpp"
           | 
# 299 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 299 "lib\\TWI\\src\\TWI.cpp"
           | 
# 299 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (4))
# 299 "lib\\TWI\\src\\TWI.cpp"
           );
            state = 0;
            break;
        case 
# 302 "lib\\TWI\\src\\TWI.cpp" 3
            0x38
# 302 "lib\\TWI\\src\\TWI.cpp"
                          :
            error = 
# 303 "lib\\TWI\\src\\TWI.cpp" 3
                   0x38
# 303 "lib\\TWI\\src\\TWI.cpp"
                                 ;
            (
# 304 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 304 "lib\\TWI\\src\\TWI.cpp"
           = 
# 304 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 304 "lib\\TWI\\src\\TWI.cpp"
           | 
# 304 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 304 "lib\\TWI\\src\\TWI.cpp"
           | 
# 304 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 304 "lib\\TWI\\src\\TWI.cpp"
           | 
# 304 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (6))
# 304 "lib\\TWI\\src\\TWI.cpp"
           );
            state = 0;
            break;


        case 
# 309 "lib\\TWI\\src\\TWI.cpp" 3
            0x50
# 309 "lib\\TWI\\src\\TWI.cpp"
                          :
            rxBufferData[rxBufferIndex++] = 
# 310 "lib\\TWI\\src\\TWI.cpp" 3
                                           (*(volatile uint8_t *)((0x03) + 0x20))
# 310 "lib\\TWI\\src\\TWI.cpp"
                                               ;
        case 
# 311 "lib\\TWI\\src\\TWI.cpp" 3
            0x40
# 311 "lib\\TWI\\src\\TWI.cpp"
                         :

            if (rxBufferIndex < rxBufferLength) {
                (
# 314 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 314 "lib\\TWI\\src\\TWI.cpp"
               = 
# 314 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 314 "lib\\TWI\\src\\TWI.cpp"
               | 
# 314 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 314 "lib\\TWI\\src\\TWI.cpp"
               | 
# 314 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0)) 
# 314 "lib\\TWI\\src\\TWI.cpp"
               | 
# 314 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (6))
# 314 "lib\\TWI\\src\\TWI.cpp"
               );
            } else {
                (
# 316 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 316 "lib\\TWI\\src\\TWI.cpp"
               = 
# 316 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 316 "lib\\TWI\\src\\TWI.cpp"
               | 
# 316 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 316 "lib\\TWI\\src\\TWI.cpp"
               | 
# 316 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0))
# 316 "lib\\TWI\\src\\TWI.cpp"
               );
            }
            break;
        case 
# 319 "lib\\TWI\\src\\TWI.cpp" 3
            0x58
# 319 "lib\\TWI\\src\\TWI.cpp"
                           :
            rxBufferData[rxBufferIndex++] = 
# 320 "lib\\TWI\\src\\TWI.cpp" 3
                                           (*(volatile uint8_t *)((0x03) + 0x20))
# 320 "lib\\TWI\\src\\TWI.cpp"
                                               ;


            rxBufferLength = rxBufferIndex;

            if (sendStop) {
                (
# 326 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 326 "lib\\TWI\\src\\TWI.cpp"
               = 
# 326 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 326 "lib\\TWI\\src\\TWI.cpp"
               | 
# 326 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 326 "lib\\TWI\\src\\TWI.cpp"
               | 
# 326 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0)) 
# 326 "lib\\TWI\\src\\TWI.cpp"
               | 
# 326 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (4))
# 326 "lib\\TWI\\src\\TWI.cpp"
               );
                state = 0;

                if (onReceiveHandler) {
                    onReceiveHandler();
                }
            } else {
                isRepeatedStart = 1;







                
# 341 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 341 "lib\\TWI\\src\\TWI.cpp"
                    = 
# 341 "lib\\TWI\\src\\TWI.cpp" 3
                      (1 << (7)) 
# 341 "lib\\TWI\\src\\TWI.cpp"
                                 | 
# 341 "lib\\TWI\\src\\TWI.cpp" 3
                                   (1 << (5))
# 341 "lib\\TWI\\src\\TWI.cpp"
                                             | 
# 341 "lib\\TWI\\src\\TWI.cpp" 3
                                               (1 << (2)) 
# 341 "lib\\TWI\\src\\TWI.cpp"
                                                         ;
                state = 0;
            }
            break;
        case 
# 345 "lib\\TWI\\src\\TWI.cpp" 3
            0x48
# 345 "lib\\TWI\\src\\TWI.cpp"
                          :
            (
# 346 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 346 "lib\\TWI\\src\\TWI.cpp"
           = 
# 346 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 346 "lib\\TWI\\src\\TWI.cpp"
           | 
# 346 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 346 "lib\\TWI\\src\\TWI.cpp"
           | 
# 346 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 346 "lib\\TWI\\src\\TWI.cpp"
           | 
# 346 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (4))
# 346 "lib\\TWI\\src\\TWI.cpp"
           );
            state = 0;
            break;





        case 
# 354 "lib\\TWI\\src\\TWI.cpp" 3
            0x60
# 354 "lib\\TWI\\src\\TWI.cpp"
                         :
        case 
# 355 "lib\\TWI\\src\\TWI.cpp" 3
            0x70
# 355 "lib\\TWI\\src\\TWI.cpp"
                           :
        case 
# 356 "lib\\TWI\\src\\TWI.cpp" 3
            0x68
# 356 "lib\\TWI\\src\\TWI.cpp"
                                  :
        case 
# 357 "lib\\TWI\\src\\TWI.cpp" 3
            0x78
# 357 "lib\\TWI\\src\\TWI.cpp"
                                    :
            state = 3;

            rxBufferIndex = 0;
            (
# 361 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 361 "lib\\TWI\\src\\TWI.cpp"
           = 
# 361 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 361 "lib\\TWI\\src\\TWI.cpp"
           | 
# 361 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 361 "lib\\TWI\\src\\TWI.cpp"
           | 
# 361 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 361 "lib\\TWI\\src\\TWI.cpp"
           | 
# 361 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (6))
# 361 "lib\\TWI\\src\\TWI.cpp"
           );
            break;
        case 
# 363 "lib\\TWI\\src\\TWI.cpp" 3
            0x80
# 363 "lib\\TWI\\src\\TWI.cpp"
                          :
        case 
# 364 "lib\\TWI\\src\\TWI.cpp" 3
            0x90
# 364 "lib\\TWI\\src\\TWI.cpp"
                                :

            if (rxBufferIndex < 32){

                rxBufferData[rxBufferIndex++] = 
# 368 "lib\\TWI\\src\\TWI.cpp" 3
                                               (*(volatile uint8_t *)((0x03) + 0x20))
# 368 "lib\\TWI\\src\\TWI.cpp"
                                                   ;
                (
# 369 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 369 "lib\\TWI\\src\\TWI.cpp"
               = 
# 369 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 369 "lib\\TWI\\src\\TWI.cpp"
               | 
# 369 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 369 "lib\\TWI\\src\\TWI.cpp"
               | 
# 369 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0)) 
# 369 "lib\\TWI\\src\\TWI.cpp"
               | 
# 369 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (6))
# 369 "lib\\TWI\\src\\TWI.cpp"
               );
            } else {

                (
# 372 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 372 "lib\\TWI\\src\\TWI.cpp"
               = 
# 372 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 372 "lib\\TWI\\src\\TWI.cpp"
               | 
# 372 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 372 "lib\\TWI\\src\\TWI.cpp"
               | 
# 372 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0))
# 372 "lib\\TWI\\src\\TWI.cpp"
               );
            }
            break;
        case 
# 375 "lib\\TWI\\src\\TWI.cpp" 3
            0xA0
# 375 "lib\\TWI\\src\\TWI.cpp"
                      :

            (
# 377 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 377 "lib\\TWI\\src\\TWI.cpp"
           = 
# 377 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 377 "lib\\TWI\\src\\TWI.cpp"
           | 
# 377 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 377 "lib\\TWI\\src\\TWI.cpp"
           | 
# 377 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 377 "lib\\TWI\\src\\TWI.cpp"
           | 
# 377 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (6))
# 377 "lib\\TWI\\src\\TWI.cpp"
           );
            state = 0;


            if (rxBufferIndex < 32) {
                rxBufferData[rxBufferIndex] = '\0';
            }

            if (onReceiveHandler) {
                onReceiveHandler();
            }

            rxBufferIndex = 0;
            rxBufferLength = 0;
            break;
        case 
# 392 "lib\\TWI\\src\\TWI.cpp" 3
            0x88
# 392 "lib\\TWI\\src\\TWI.cpp"
                           :
        case 
# 393 "lib\\TWI\\src\\TWI.cpp" 3
            0x98
# 393 "lib\\TWI\\src\\TWI.cpp"
                                 :

            (
# 395 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 395 "lib\\TWI\\src\\TWI.cpp"
           = 
# 395 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 395 "lib\\TWI\\src\\TWI.cpp"
           | 
# 395 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 395 "lib\\TWI\\src\\TWI.cpp"
           | 
# 395 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0))
# 395 "lib\\TWI\\src\\TWI.cpp"
           );
            break;


        case 
# 399 "lib\\TWI\\src\\TWI.cpp" 3
            0xA8
# 399 "lib\\TWI\\src\\TWI.cpp"
                         :
        case 
# 400 "lib\\TWI\\src\\TWI.cpp" 3
            0xB0
# 400 "lib\\TWI\\src\\TWI.cpp"
                                  :
            state = 4;

            txBufferIndex = 0;
            txBufferLength = 0;

            if (onRequestHandler) {

                onRequestHandler();
            }

            if (0 == txBufferLength) {

                txBufferLength = 1;
                txBufferData[0] = 0x00;
            }
        case 
# 416 "lib\\TWI\\src\\TWI.cpp" 3
            0xB8
# 416 "lib\\TWI\\src\\TWI.cpp"
                          :
            
# 417 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x03) + 0x20)) 
# 417 "lib\\TWI\\src\\TWI.cpp"
                = txBufferData[txBufferIndex++];

            if (txBufferIndex < txBufferLength){
                (
# 420 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 420 "lib\\TWI\\src\\TWI.cpp"
               = 
# 420 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 420 "lib\\TWI\\src\\TWI.cpp"
               | 
# 420 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 420 "lib\\TWI\\src\\TWI.cpp"
               | 
# 420 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0)) 
# 420 "lib\\TWI\\src\\TWI.cpp"
               | 
# 420 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (6))
# 420 "lib\\TWI\\src\\TWI.cpp"
               );
            } else {
                (
# 422 "lib\\TWI\\src\\TWI.cpp" 3
               (*(volatile uint8_t *)((0x36) + 0x20)) 
# 422 "lib\\TWI\\src\\TWI.cpp"
               = 
# 422 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (7)) 
# 422 "lib\\TWI\\src\\TWI.cpp"
               | 
# 422 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (2)) 
# 422 "lib\\TWI\\src\\TWI.cpp"
               | 
# 422 "lib\\TWI\\src\\TWI.cpp" 3
               (1 << (0))
# 422 "lib\\TWI\\src\\TWI.cpp"
               );
            }
            break;
        case 
# 425 "lib\\TWI\\src\\TWI.cpp" 3
            0xC0
# 425 "lib\\TWI\\src\\TWI.cpp"
                           :
        case 
# 426 "lib\\TWI\\src\\TWI.cpp" 3
            0xC8
# 426 "lib\\TWI\\src\\TWI.cpp"
                           :

            (
# 428 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 428 "lib\\TWI\\src\\TWI.cpp"
           = 
# 428 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 428 "lib\\TWI\\src\\TWI.cpp"
           | 
# 428 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 428 "lib\\TWI\\src\\TWI.cpp"
           | 
# 428 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 428 "lib\\TWI\\src\\TWI.cpp"
           | 
# 428 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (6))
# 428 "lib\\TWI\\src\\TWI.cpp"
           );
            state = 0;
            break;



        case 
# 434 "lib\\TWI\\src\\TWI.cpp" 3
            0xF8
# 434 "lib\\TWI\\src\\TWI.cpp"
                      :
            break;
        case 
# 436 "lib\\TWI\\src\\TWI.cpp" 3
            0x00
# 436 "lib\\TWI\\src\\TWI.cpp"
                        :
            error = 
# 437 "lib\\TWI\\src\\TWI.cpp" 3
                   0x00
# 437 "lib\\TWI\\src\\TWI.cpp"
                               ;
            (
# 438 "lib\\TWI\\src\\TWI.cpp" 3
           (*(volatile uint8_t *)((0x36) + 0x20)) 
# 438 "lib\\TWI\\src\\TWI.cpp"
           = 
# 438 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (7)) 
# 438 "lib\\TWI\\src\\TWI.cpp"
           | 
# 438 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (2)) 
# 438 "lib\\TWI\\src\\TWI.cpp"
           | 
# 438 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (0)) 
# 438 "lib\\TWI\\src\\TWI.cpp"
           | 
# 438 "lib\\TWI\\src\\TWI.cpp" 3
           (1 << (4))
# 438 "lib\\TWI\\src\\TWI.cpp"
           );
            state = 0;
            break;
    }
}
